-- Creating a table for all regular entities
-- Employee IDs are three digit numbers beginning with 1
CREATE TABLE employee (
    employee_id INT PRIMARY KEY,
    CHECK (employee_id >= 100 AND employee_id < 200),
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    birth_date DATE NOT NULL,
    title VARCHAR(50),
    branch_id INT
);

-- Branch IDs auto increment from 1
CREATE TABLE branch (
    branch_id INT PRIMARY KEY AUTO_INCREMENT,
    branch_name VARCHAR(30),
    location VARCHAR(50) NOT NULL,
    manager_id INT,
    FOREIGN KEY(manager_id) REFERENCES employee(employee_id) ON DELETE SET NULL
);

-- Updating the employee table's foreign key
ALTER TABLE employee
ADD FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL;

-- Customer IDs are three digit numbers not beginning with 1
CREATE TABLE customer (
    customer_id INT PRIMARY KEY,
    CHECK (customer_id >= 200 AND customer_id < 1000),
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    birth_date DATE NOT NULL
);

-- Account IDs are four digit numbers
CREATE TABLE account (
    account_id INT PRIMARY KEY,
    CHECK (account_id >= 1000 AND account_id < 10000),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL,
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customer(customer_id) ON DELETE CASCADE,
    account_type VARCHAR(10),
    balance DECIMAL(8, 2) DEFAULT 0
);

-- Transaction IDs are five digit numbers
CREATE TABLE transactions (
    transaction_id INT NOT NULL AUTO_INCREMENT,
    account_id INT,
    FOREIGN KEY(account_id) REFERENCES account(account_id) ON DELETE SET NULL,
    amount DECIMAL(6, 2) NOT NULL,
    time DATETIME,
    PRIMARY KEY(transaction_id)
);

-- Setting the starting value for the primary key
ALTER TABLE account AUTO_INCREMENT=10000;

-- Creating a procedure to update balance after every transaction
DELIMITER $$

CREATE PROCEDURE UpdateBalance (
    IN accountID INT
)
BEGIN
    UPDATE account
    SET account.balance = (
        SELECT SUM(transactions.amount)
        FROM transactions
        WHERE transactions.account_id = accountID
    )
    WHERE account.account_id = accountID;
END $$

-- Creating a procedure to make transactions
DELIMITER $$

CREATE PROCEDURE MakeTransaction (
    IN accountID INT,
    IN transactionAmount DECIMAL(6, 2),
    IN transactionType CHAR(1)
)
BEGIN
    IF transactionType = 'D' THEN
        INSERT INTO transactions(account_id, amount, time) VALUES(
            accountID, 
            transactionAmount, 
            SYSDATE()
        );
    ELSEIF transactionType = 'W' THEN
        INSERT INTO transactions(account_id, amount, time) VALUES(
            accountID, 
            transactionAmount * -1, 
            SYSDATE()
        );
    END IF;
END $$
